generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  name        String?
  username    String?   @unique
  email       String    @unique
  password    String?
  verifyToken String?
  authToken   String?
  avatar      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  comments    Comment[]
  posts       Post[]

  @@map("users")
}

model Post {
  id                                       String      @id @default(dbgenerated("gen_random_uuid()"))
  title                                    String
  content                                  String
  published                                Boolean     @default(false)
  authorId                                 String
  createdAt                                DateTime    @default(now())
  updatedAt                                DateTime    @default(now()) @updatedAt
  viewCount                                Int         @default(0)
  category_id                              String?
  comments                                 Comment[]
  post_tags                                post_tags[]
  categories_posts_category_idTocategories Category?   @relation("posts_category_idTocategories", fields: [category_id], references: [id], onUpdate: NoAction, map: "fk_category")
  author                                   User        @relation(fields: [authorId], references: [id])
  categories                               Category[]  @relation("PostCategories")
  tags                                     Tag[]       @relation("PostTags")

  @@map("posts")
}

model Comment {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@map("comments")
}

model Category {
  id                                  String @id @default(dbgenerated("gen_random_uuid()"))
  name                                String @unique
  posts_posts_category_idTocategories Post[] @relation("posts_category_idTocategories")
  posts                               Post[] @relation("PostCategories")

  @@map("categories")
}

model Tag {
  id        String      @id @default(dbgenerated("gen_random_uuid()"))
  name      String      @unique
  post_tags post_tags[]
  posts     Post[]      @relation("PostTags")

  @@map("tags")
}

model post_tags {
  post_id String
  tag_id  String
  posts   Post   @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_post")
  tags    Tag    @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_tag")

  @@id([post_id, tag_id])
}
